#!/bin/sh -x
#
# This will format a new machine with a BOOT+HAMMER setup and install
# the live CD.  You would boot the live CD, dhclient your network up,
# then run 'rconfig :hammer', assuming you have a rconfig server on the
# LAN.  Alternately fetch the script from a known location and just run it.
#
# ad6s1a will be setup as a small UFS /boot.  ad6s1d will be setup as
# HAMMER with all remaining disk space.  Pseudo file-systems will be
# created for /var, /usr, etc (giving them separate inode spaces and
# backup domains).
#
# WARNING: HAMMER filesystems (and pseudo-filesystems) must be
# occassionally pruned and reblocked.  'man hammer' for more information.

disk=$1
hostname=$2
username=$3
passwd=$4
fullname="$5"

# Format and label the disk.
#
#     'a' small UFS boot
#     'd' HAMMER filesystem
#
#     Use PFSs for backup domain separation
#
dd if=/dev/zero of=/dev/${disk} bs=32k count=16
fdisk -IB ${disk}
disklabel64 -r -w ${disk}s1 auto
disklabel64 -B ${disk}s1
disklabel64 ${disk}s1 > /tmp/label

cat >> /tmp/label << EOF
  a: 768m 0 4.2BSD
  b: 2g * swap
  d: * * HAMMER
EOF
disklabel64 -R ${disk}s1 /tmp/label

# Create file systems
newfs /dev/${disk}s1a
newfs_hammer -f -L ROOT /dev/${disk}s1d

# Mount it
mount_hammer /dev/${disk}s1d /mnt
mkdir /mnt/boot
mount /dev/${disk}s1a /mnt/boot

# Create PFS mount points for nullfs.
#
# Do the mounts manually so we can install the system, setup
# the fstab later on.
mkdir /mnt/pfs

hammer pfs-master /mnt/pfs/usr
hammer pfs-master /mnt/pfs/usr.obj
hammer pfs-master /mnt/pfs/var
hammer pfs-master /mnt/pfs/var.crash
hammer pfs-master /mnt/pfs/var.tmp
hammer pfs-master /mnt/pfs/tmp
hammer pfs-master /mnt/pfs/home

mkdir /mnt/usr
mkdir /mnt/var
mkdir /mnt/tmp
mkdir /mnt/home

mount_null /mnt/pfs/usr /mnt/usr
mount_null /mnt/pfs/var /mnt/var
mount_null /mnt/pfs/tmp /mnt/tmp
mount_null /mnt/pfs/home /mnt/home

mkdir /mnt/usr/obj
mkdir /mnt/var/tmp
mkdir /mnt/var/crash

mount_null /mnt/pfs/var.tmp /mnt/var/tmp
mount_null /mnt/pfs/var.crash /mnt/var/crash
mount_null /mnt/pfs/usr.obj /mnt/usr/obj

chmod 1777 /mnt/tmp
chmod 1777 /mnt/var/tmp

# Install the system from the live CD
cpdup -o / /mnt
cpdup -o /boot /mnt/boot
cpdup -o /usr /mnt/usr
cpdup -o /usr/local/etc /mnt/usr/local/etc
cpdup -o /var /mnt/var
cpdup -i0 /etc.hdd /mnt/etc

chflags -R nohistory /mnt/tmp
chflags -R nohistory /mnt/var/tmp
chflags -R nohistory /mnt/var/crash
chflags -R nohistory /mnt/usr/obj

cat > /mnt/etc/fstab << EOF
# Device		Mountpoint	FStype	Options		Dump	Pass#
/dev/${disk}s1d		/		hammer	rw		1	1
/dev/${disk}s1a		/boot		ufs	rw		1	1
/dev/${disk}s1b		none		swap	sw		0	0
/pfs/usr		/usr		null	rw		0	0
/pfs/var		/var		null	rw		0	0
/pfs/tmp		/tmp		null	rw		0	0
/pfs/home		/home		null	rw		0	0
/pfs/var.tmp		/var/tmp	null	rw		0	0
/pfs/usr.obj		/usr/obj	null	rw		0	0
/pfs/var.crash		/var/crash	null	rw		0	0
proc			/proc		procfs	rw		0	0
EOF

# Because root is not on the boot partition we have to tell the loader
# to tell the kernel where root is.
cat > /mnt/boot/loader.conf << EOF
kernel_options=""
autoboot_delay="1"
vfs.root.mountfrom="hammer:${disk}s1d"
EOF

# Setup interface, configuration, sshd
ifc=$(route -n get default | fgrep interface | awk '{ print $2; }')

cat > /mnt/etc/rc.conf << EOF
ifconfig_${ifc}="DHCP"
sshd_enable="YES"
dntpd_enable="YES"
hostname="${hostname}"
dumpdev="/dev/${disk}s1b"
EOF

# Set up user accounts
echo "$passwd" | pw -V /mnt/etc useradd $username -h 0 -s /bin/sh -G wheel -d /home/$username -c "$fullname";
echo "$passwd" | pw -V /mnt/etc usermod root -h 0;

mkdir -p /mnt/home/$username;
chown 1001:1001 /mnt/home/$username;

#sed -i -e 's/PermitRootLogin without-password/PermitRootLogin yes/' /mnt/etc/ssh/sshd_config;
sed -i -e 's/PasswordAuthentication.*/PasswordAuthentication yes/' /mnt/etc/ssh/sshd_config;

# Cleanup of files from the LiveISO
rm -R /mnt/README* /mnt/autorun* /mnt/index.html /mnt/dflybsd.ico /mnt/etc.hdd;
rm /mnt/boot.catalog;

# Enable name resoultion in chroot /mnt
cp /etc/resolv.conf /mnt/etc;

# Setup pkg
chroot /mnt pkg update;

# Setup sudo
chroot /mnt pkg install -y sudo;
sed -i -e 's/.*%wheel ALL=(ALL) NOPASSWD: ALL/%wheel ALL=(ALL) NOPASSWD: ALL/' /mnt/usr/local/etc/sudoers;

# reboot
reboot
